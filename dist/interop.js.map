{"version":3,"file":"interop.js","sourceRoot":"","sources":["../src/interop.ts"],"names":[],"mappings":";;AAAA,8CAA8C;AAC9C,+EAA0E;AAC1E,6CAAoC;AACpC,iBAAe;AACf,yDAAqD;AAGrD;IAEI,gBAAwB,CAAC;IAGlB,MAAM,CAAC,cAAc,CAAC,OAAe,EAAE,GAAG,MAAgB;QAE7D,mBAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAEjF,OAAO,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;QACzB,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;YAClB,OAAO,GAAG,OAAO,GAAG,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAExF,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YAE/B,YAAY,CAAC,IAAI,CACb,UAAU,uDAAyB,CAAC,WAAW,IAAI,OAAO,EAAE,EAE5D,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM;gBAElB,EAAE,CAAC,CAAC,KAAK,CAAC,CACV,CAAC;oBACG,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,MAAM,CAAC;gBACX,CAAC;gBAED,EAAE,CAAC,CAAC,MAAM,CAAC,CACX,CAAC;oBACG,MAAM,CAAC,IAAI,kCAAe,CAAC,MAAM,CAAC,CAAC,CAAC;oBACpC,MAAM,CAAC;gBACX,CAAC;gBAED,OAAO,CAAC,MAAM,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AApCD,0BAoCC","sourcesContent":["import * as ChildProcess from \"child_process\";\nimport { SecurityCoreConfiguration } from \"./security-core-configuration\";\nimport { given } from \"n-defensive\";\nimport \"n-ext\";\nimport { CryptoException } from \"./crypto-exception\";\n\n\nexport class Interop\n{\n    private constructor() { }\n    \n    \n    public static executeCommand(command: string, ...params: string[]): Promise<string>\n    {\n        given(command, \"command\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        command = command.trim();\n        if (params.length > 0)\n            command = command + \"::\" + Buffer.from(params.join(\",\"), \"utf8\").toString(\"base64\");   \n        \n        return new Promise((resolve, reject) =>\n        {\n            ChildProcess.exec(\n                `dotnet ${SecurityCoreConfiguration.coreExePath} ${command}`,\n\n                (error, stdout, stderr) =>\n                {\n                    if (error)\n                    {\n                        reject(error);\n                        return;\n                    }\n\n                    if (stderr)\n                    {\n                        reject(new CryptoException(stderr));\n                        return;\n                    }\n\n                    resolve(stdout);\n                });\n        });\n    }\n}"]}