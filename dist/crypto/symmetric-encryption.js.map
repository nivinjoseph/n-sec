{"version":3,"file":"symmetric-encryption.js","sourceRoot":"","sources":["../../src/crypto/symmetric-encryption.ts"],"names":[],"mappings":";;AAAA,uCAAoC;AAGpC,SAAS;AACT;IAEI,gBAAwB,CAAC;IAGlB,MAAM,CAAC,WAAW;QAErB,MAAM,CAAC,iBAAO,CAAC,cAAc,CAAC,iCAAiC,CAAC,CAAC;IACrE,CAAC;IAEM,MAAM,CAAC,OAAO,CAAC,GAAW,EAAE,KAAa;QAE5C,MAAM,CAAC,iBAAO,CAAC,cAAc,CAAC,6BAA6B,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IAC7E,CAAC;IAEM,MAAM,CAAC,OAAO,CAAC,GAAW,EAAE,KAAa;QAE5C,MAAM,CAAC,iBAAO,CAAC,cAAc,CAAC,6BAA6B,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IAC7E,CAAC;CACJ;AAnBD,kDAmBC","sourcesContent":["import { Interop } from \"./interop\";\n\n\n// public\nexport class SymmetricEncryption\n{\n    private constructor() { }\n\n    \n    public static generateKey(): Promise<string>\n    {\n        return Interop.executeCommand(\"SymmetricEncryption.GenerateKey\");\n    }\n    \n    public static encrypt(key: string, value: string): Promise<string>\n    {\n        return Interop.executeCommand(\"SymmetricEncryption.Encrypt\", key, value);\n    }\n    \n    public static decrypt(key: string, value: string): Promise<string>\n    {\n        return Interop.executeCommand(\"SymmetricEncryption.Decrypt\", key, value);\n    }\n}"]}