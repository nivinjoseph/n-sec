{"version":3,"file":"digital-signature.js","sourceRoot":"","sources":["../../src/crypto/digital-signature.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,uCAAoC;AAGpC,SAAS;AACT;IAEI,gBAAwB,CAAC;IAGlB,MAAM,CAAC,IAAI,CAAC,OAAe,EAAE,KAAa;QAE7C,MAAM,CAAC,iBAAO,CAAC,cAAc,CAAC,uBAAuB,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IAC3E,CAAC;IAEM,MAAM,CAAO,MAAM,CAAC,SAAiB,EAAE,KAAa,EAAE,SAAiB;;YAE1E,IAAI,MAAM,GAAG,MAAM,iBAAO,CAAC,cAAc,CAAC,yBAAyB,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;YAClG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC;QAClD,CAAC;KAAA;CACJ;AAfD,4CAeC","sourcesContent":["import { Interop } from \"./interop\";\n\n\n// public\nexport class DigitalSignature\n{\n    private constructor() { }\n    \n    \n    public static sign(keyPair: string, value: string): Promise<string>\n    {\n        return Interop.executeCommand(\"DigitalSignature.Sign\", keyPair, value);\n    }\n    \n    public static async verify(publicKey: string, value: string, signature: string): Promise<boolean>\n    {\n        let result = await Interop.executeCommand(\"DigitalSignature.Verify\", publicKey, value, signature);\n        return result.trim().toLowerCase() === \"true\";\n    }\n}"]}