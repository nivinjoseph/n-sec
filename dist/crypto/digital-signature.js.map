{"version":3,"file":"digital-signature.js","sourceRoot":"","sources":["../../src/crypto/digital-signature.ts"],"names":[],"mappings":"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","sourcesContent":["const ursa = require(\"ursa\");\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport \"@nivinjoseph/n-ext\";\nimport * as Crypto from \"crypto\";\n\n\n// public\nexport class DigitalSignature\n{\n    private constructor() { }\n    \n    \n    public static sign(keyPair: string, value: string): Promise<string>\n    {\n        given(keyPair, \"keyPair\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(value, \"value\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n\n        keyPair = keyPair.trim();\n        value = value.trim();\n        \n        const hash = Crypto.createHash(\"sha512\");\n        hash.update(value, \"utf8\");\n        \n        const key = ursa.createPrivateKey(Buffer.from(keyPair, \"hex\"));\n        const signature = key.sign(\"sha512\", hash.digest(), null, \"hex\");\n        return Promise.resolve(signature);\n    }\n    \n    public static async verify(keyPairOrPublicKey: string, value: string, signature: string): Promise<boolean>\n    {\n        given(keyPairOrPublicKey, \"keyPairOrPublicKey\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(value, \"value\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n        given(signature, \"signature\").ensureHasValue().ensureIsString().ensure(t => !t.isEmptyOrWhiteSpace());\n        \n        keyPairOrPublicKey = keyPairOrPublicKey.trim();\n        value = value.trim();\n        signature = signature.trim();\n        \n        const hash = Crypto.createHash(\"sha512\");\n        hash.update(value, \"utf8\");\n        \n        try \n        {\n            const buf = Buffer.from(keyPairOrPublicKey, \"hex\");\n            let key;\n            try \n            {\n                key = ursa.createPublicKey(buf);\n            }\n            catch (error)\n            {\n                key = ursa.createPrivateKey(buf);\n            }\n            \n            const result = key.verify(\"sha512\", hash.digest(), Buffer.from(signature, \"hex\"));\n            return Promise.resolve(result);\n        }\n        catch (error)\n        {\n            return Promise.resolve(false);\n        }\n    }\n}"]}