{"version":3,"file":"expired-token-exception.js","sourceRoot":"","sources":["../../src/api-security/expired-token-exception.ts"],"names":[],"mappings":";;AAAA,6CAAwC;AACxC,6CAAoC;AACpC,iBAAe;AAGf,SAAS;AACT,2BAAmC,SAAQ,uBAAS;IAKhD,IAAW,KAAK,KAAa,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAGlD,YAAmB,KAAa;QAE5B,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAC7E,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;QACrB,KAAK,CAAC,UAAU,KAAK,eAAe,CAAC,CAAC;QACtC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,CAAC;CACJ;AAfD,sDAeC","sourcesContent":["import { Exception } from \"n-exception\";\nimport { given } from \"n-defensive\";\nimport \"n-ext\";\n\n\n// public\nexport class ExpiredTokenException extends Exception\n{\n    private readonly _token: string;\n    \n    \n    public get token(): string { return this._token; }\n    \n    \n    public constructor(token: string)\n    {\n        given(token, \"token\").ensureHasValue().ensure(t => !t.isEmptyOrWhiteSpace());\n        token = token.trim();\n        super(`Token '${token}' is expired.`);\n        this._token = token;\n    }\n}"]}